//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KourseWork.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AudioStudioDBEntities2 : DbContext
    {
        public AudioStudioDBEntities2()
            : base("name=AudioStudioDBEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Альбомы> Альбомы { get; set; }
        public virtual DbSet<Аранжировка> Аранжировка { get; set; }
        public virtual DbSet<Выполнение_услуги> Выполнение_услуги { get; set; }
        public virtual DbSet<Договоры> Договоры { get; set; }
        public virtual DbSet<Запись> Запись { get; set; }
        public virtual DbSet<Исполнитель> Исполнитель { get; set; }
        public virtual DbSet<Перечень_услуг> Перечень_услуг { get; set; }
        public virtual DbSet<Песни> Песни { get; set; }
        public virtual DbSet<Сведение> Сведение { get; set; }
        public virtual DbSet<Сотрудники> Сотрудники { get; set; }
        public virtual DbSet<Autentification> Autentification { get; set; }
    
        [DbFunction("AudioStudioDBEntities2", "PeriodSell")]
        public virtual IQueryable<PeriodSell_Result> PeriodSell(Nullable<System.DateTime> date1, Nullable<System.DateTime> date2)
        {
            var date1Parameter = date1.HasValue ?
                new ObjectParameter("Date1", date1) :
                new ObjectParameter("Date1", typeof(System.DateTime));
    
            var date2Parameter = date2.HasValue ?
                new ObjectParameter("Date2", date2) :
                new ObjectParameter("Date2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<PeriodSell_Result>("[AudioStudioDBEntities2].[PeriodSell](@Date1, @Date2)", date1Parameter, date2Parameter);
        }
    
        public virtual int Dogovor(string dog_count)
        {
            var dog_countParameter = dog_count != null ?
                new ObjectParameter("Dog_count", dog_count) :
                new ObjectParameter("Dog_count", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dogovor", dog_countParameter);
        }
    
        public virtual int Nalog(Nullable<int> perCent)
        {
            var perCentParameter = perCent.HasValue ?
                new ObjectParameter("PerCent", perCent) :
                new ObjectParameter("PerCent", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Nalog", perCentParameter);
        }
    }
}
